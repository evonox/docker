// Generated by dts-bundle v0.7.3

declare module 'docker-ts' {
    /**
      * This is the main library file
      */
    export * from "docker-ts/common/constants";
    export * from "docker-ts/common/declarations";
    export * from "docker-ts/common/enumerations";
    export * from "docker-ts/common/events-api";
    export * from "docker-ts/common/panel-api";
    export * from "docker-ts/common/serialization";
    export { DockManager } from "docker-ts/facade/DockManager";
    export { PanelContainer } from "docker-ts/containers/PanelContainer";
    export { TabbedPanelContainer } from "docker-ts/containers/TabbedPanelContainer";
    
}

declare module 'docker-ts/common/constants' {
    /**
      * Various Helper Constants
      */
    export const MOUSE_BTN_LEFT = 0;
    export const MOUSE_BTN_MIDDLE = 1;
    export const MOUSE_BTN_RIGHT = 2;
}

declare module 'docker-ts/common/declarations' {
    import type { ComponentEventHandler, ComponentEventSubscription } from "docker-ts/framework/component-events";
    import type { DockNode } from "docker-ts/model/DockNode";
    import type { IRect, ISize } from "docker-ts/common/dimensions";
    import type { ContainerType, DockKind } from "docker-ts/common/enumerations";
    import type { IContextMenuAPI } from "docker-ts/common/panel-api";
    import type { IState } from "docker-ts/common/serialization";
    /**
        * Interface containing the container dock information
        */
    export interface IDockInfo {
            referenceNode: DockNode;
            dockKind: DockKind;
            ratio?: number;
    }
    /**
        * Interface for components having event support
        */
    export interface IEventEmitter {
            on(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
            off(eventName: string): void;
            once(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
    }
    /**
        * Generic Dock Container Interface
        */
    export interface IDockContainer extends IEventEmitter {
            getDOM(): HTMLElement;
            getContainerType(): ContainerType;
            hasChanges(): boolean;
            getMinimumChildNodeCount(): number;
            getChildContainers(): IDockContainer[];
            setActiveChild(container: IDockContainer): void;
            setVisible(visible: boolean): void;
            isHidden(): boolean;
            setHeaderVisibility(visible: boolean): void;
            updateState(): void;
            dispose(): void;
            onQueryContextMenu(config: IContextMenuAPI): void;
            handleContextMenuAction(actionName: string): void;
            getWidth(): number;
            getHeight(): number;
            getMinWidth(): number;
            getMinHeight(): number;
            queryLoadedSize(): ISize;
            performLayout(children: IDockContainer[], relayoutEvenIfEqual: boolean): void;
            resize(rect: IRect): void;
            saveState(state: IState): void;
            loadState(state: IState): void;
    }
}

declare module 'docker-ts/common/enumerations' {
    /**
      * Enumeration Declarations
      */
    export enum SelectionState {
        Unselected = "unselected",
        Selected = "selected",
        Focused = "focused"
    }
    export enum PanelContainerState {
        Docked = "docked",
        Floating = "floating",
        Minimized = "minimized",
        Maximized = "maximized",
        InCollapser = "in-collapser",
        PopupWindow = "popup-window"
    }
    export enum DockKind {
        Left = "left",
        Right = "right",
        Up = "up",
        Down = "down",
        Fill = "fill"
    }
    export enum OrientationKind {
        Row = "row",
        Column = "column",
        Fill = "fill"
    }
    export enum TabOrientation {
        Top = "top",
        Bottom = "bottom",
        Left = "left",
        Right = "right"
    }
    export enum ContainerType {
        Panel = "panel",
        RowLayout = "row",
        ColumnLayout = "column",
        FillLayout = "fill"
    }
    export enum WheelTypes {
        Left = "left",
        Right = "right",
        Top = "top",
        Bottom = "bottom",
        Fill = "fill",
        SideLeft = "side-left",
        SideRight = "side-right",
        SideTop = "side-top",
        SideBottom = "side-bottom"
    }
}

declare module 'docker-ts/common/events-api' {
    import type { DockManager } from "docker-ts/facade/DockManager";
    import type { PanelContainer } from "docker-ts/containers/PanelContainer";
    import type { Dialog } from "docker-ts/floating/Dialog";
    import type { DockNode } from "docker-ts/model/DockNode";
    import type { TabPage } from "docker-ts/tabview/TabPage";
    import type { IDockContainer } from "docker-ts/common/declarations";
    import { IPoint } from "docker-ts/common/dimensions";
    /**
        * Various interface definitons of payloads carrying event data
        */
    export interface GenericPayload {
            dockManager: DockManager;
    }
    export interface PanelContainerPayload extends GenericPayload {
            panel: PanelContainer;
    }
    export interface DockNodePayload extends GenericPayload {
            node: DockNode;
    }
    export interface DialogPayload extends GenericPayload {
            dialog: Dialog;
    }
    export interface DialogPositionPayload extends DialogPayload {
            position: IPoint;
    }
    export interface ContainerPayload extends GenericPayload {
            container: IDockContainer;
    }
    export interface TabPagePayload extends GenericPayload {
            tabPage: TabPage;
    }
    export interface ActivePanelChanged extends GenericPayload {
            previousActivePanel: PanelContainer;
            activePanel: PanelContainer;
    }
    /**
        * Event Payload Type Mapping
        */
    export interface EventPayloadMap {
            "onSuspendLayout": ContainerPayload;
            "onResumeLayout": ContainerPayload;
            "onDock": DockNodePayload;
            "onUndock": DockNodePayload;
            "onTabReorder": DockNodePayload;
            "onTabChange": TabPagePayload;
            "onClosePanel": PanelContainerPayload;
            "onCreateDialog": DialogPayload;
            "onShowDialog": DialogPayload;
            "onHideDialog": DialogPayload;
            "onChangeDialogPosition": DialogPositionPayload;
            "onContainerResized": ContainerPayload;
            "onActivePanelChange": ActivePanelChanged;
            "onActiveDocumentChange": ActivePanelChanged;
            "onLayoutChanged": GenericPayload;
            "onPinned": ContainerPayload;
            "onUnpinned": ContainerPayload;
            "onUndockToPopup": ContainerPayload;
            "onDockFromPopup": ContainerPayload;
            "onMinimized": ContainerPayload;
            "onRestored": ContainerPayload;
            "onMaximized": ContainerPayload;
            "onCollapsed": ContainerPayload;
            "onExpanded": ContainerPayload;
    }
    /**
        * Supported event kinds by the Dock Manager
        */
    export type EventKind = keyof EventPayloadMap;
    export type EventPayload<K extends EventKind> = EventPayloadMap[K];
}

declare module 'docker-ts/common/panel-api' {
    import type { DockManager } from "docker-ts/facade/DockManager";
    /**
        * Panel API Enumerations
        */
    export type ViewInstanceType = "singleton" | "transient";
    export type TabOrientationType = "top" | "bottom" | "left" | "right";
    export interface PanelFactoryFunction {
            (dockManager: DockManager): IPanelAPI;
    }
    export interface TabbedPanelFactoryFunction {
            (dockManager: DockManager): ITabbedPanelAPI;
    }
    /**
        * Interface for Options Container containing initial options for a panel type
        */
    export interface IInitOptions {
            getValue(key: string, defaultValue?: any): any;
    }
    /**
        * Subscription Interface for events regarding a panel itself
        */
    export interface ISubscriptionAPI {
            unsubscribe(): void;
    }
    /**
        * Every panel will have possibility to save and load its state
        * It is important for panels of the same type to save the identity of its data
        */
    export interface IPanelState {
            getValue(key: string, defaultValue?: any): any;
            setValue(key: string, value: any): void;
    }
    /**
        * Configuration interface for panels to have the ability to influence its context menu
        */
    export interface IMenuItem {
            displayOrder: number;
            icon?: string;
            title?: string;
            actionName?: string;
            disabled?: boolean;
            separator?: boolean;
    }
    /**
        * Panels will have an ability to inject custom buttons into theirs panel header
        */
    export interface IHeaderButton {
            displayOrder: number;
            icon: string;
            title: string;
            actionName: string;
            visible: boolean;
    }
    /**
        * Interface for method invoked when the user request to open a panel's context menu
        */
    export interface IContextMenuAPI {
            getMenuItems(): IMenuItem[];
            appendMenuItem(item: IMenuItem): void;
            removeMenuItem(item: IMenuItem): void;
    }
    export interface IChannel {
            notify(eventName: string, payload?: any): void;
            subscribe(eventName: string, handler: (payload?: any) => void): ISubscriptionAPI;
            subscribeOnce(eventName: string, handler: (payload?: any) => void): ISubscriptionAPI;
            unsubscribeAll(eventName: string): void;
    }
    /**
        * Interface passed to the panel's factory method with the API to influence its state in runtime
        */
    export interface IPanelStateAPI {
            getDockManager(): DockManager;
            enableProgressLoader(enable: boolean): void;
            activate(): void;
            setPanelIcon(html: string): void;
            setPanelFAIcon(faIcon: string): void;
            setPanelTitle(title: string): void;
            notifyHasChanges(hasChanges: boolean): void;
            channel(name?: string): IChannel;
            addHeaderButton(button: IHeaderButton): void;
            removeHeaderButton(actionName: string): void;
            allowAction(actionName: string): void;
            denyAction(actionName: string): void;
            listenTo(eventName: string, handler: (payload?: any) => void): ISubscriptionAPI;
    }
    export interface ITabbedPanelStateAPI extends IPanelStateAPI {
            setTabOrientation(orientation: TabOrientationType): void;
    }
    /**
        * This is interface implemented by a panel's factory method to query its state
        * The only required method is the factory method "initialize()" to create the panel's content
        */
    export interface IGenericPanelAPI {
            getProgressLoader?: () => HTMLElement;
            canClose?: () => Promise<boolean>;
            onClose?: () => Promise<void>;
            getMinWidth?: () => number;
            getMinHeight?: () => number;
            onResize?: (width: number, height: number) => void;
            onQueryContextMenu?: (contextMenu: IContextMenuAPI) => void;
            loadState?: (state: IPanelState) => void;
            saveState?: (state: IPanelState) => void;
            onActionInvoked?: (actionName: string) => void;
    }
    export interface IPanelAPI extends IGenericPanelAPI {
            initialize: (api: IPanelStateAPI, options: IInitOptions) => Promise<HTMLElement>;
    }
    export interface ITabbedPanelAPI extends IGenericPanelAPI {
            initialize: (api: ITabbedPanelStateAPI, options: IInitOptions) => Promise<void>;
    }
}

declare module 'docker-ts/common/serialization' {
    import { IPoint } from "docker-ts/common/dimensions";
    import { ContainerType } from "docker-ts/common/enumerations";
    /**
      * Serialization Data Interfaces
      */
    export interface INodeInfo {
        containerType: ContainerType;
        state: IState;
        children: INodeInfo[];
    }
    export interface IPanelInfo {
        containerType: ContainerType;
        state: IState;
        position: IPoint;
        isHidden: boolean;
    }
    export interface IState {
        panelName?: string;
        width?: number;
        height?: number;
        documentManager?: boolean;
        element?: string;
        canUndock?: boolean;
        hideCloseButton?: boolean;
        panelClientState?: any;
    }
}

declare module 'docker-ts/facade/DockManager' {
    import { DockLayoutEngine } from "docker-ts/facade/DockLayoutEngine";
    import { IDeltaPoint, IDeltaRect, IPoint, IRect } from "docker-ts/common/dimensions";
    import { EventKind, EventPayload } from "docker-ts/common/events-api";
    import { IChannel, IPanelAPI, ISubscriptionAPI, PanelFactoryFunction, TabbedPanelFactoryFunction, ViewInstanceType } from "docker-ts/common/panel-api";
    import { PanelContainer } from "docker-ts/containers/PanelContainer";
    import { Dialog } from "docker-ts/floating/Dialog";
    import { DockManagerContext } from "docker-ts/model/DockManagerContext";
    import { DockModel } from "docker-ts/model/DockModel";
    import { DockNode } from "docker-ts/model/DockNode";
    import { TabPage } from "docker-ts/tabview/TabPage";
    import { IDockConfig } from "docker-ts/common/configuration";
    import { DockKind } from "docker-ts/common/enumerations";
    import { IDockContainer, IDockInfo } from "docker-ts/common/declarations";
    import { TabbedPanelContainer } from "docker-ts/containers/TabbedPanelContainer";
    import { CollapserMargin } from "docker-ts/collapsers/CollapserMargin";
    /**
        * The main DockManager Library facade class
        */
    export class DockManager {
            constructor(container: HTMLElement, _config?: IDockConfig);
            initialize(): void;
            /**
                * Misc Basic Query Methods
                */
            get config(): Readonly<IDockConfig>;
            getCollapserMargin(collapseKind: DockKind): CollapserMargin;
            getContainerBoundingRect(): DOMRect;
            getRelativeFullWindowRect(): IRect;
            getContentBoundingRect(): IRect;
            adjustToFullWindowRelative(rect: IRect): IRect;
            getContainerElement(): HTMLElement;
            getModelContext(): DockManagerContext;
            genNextZIndex(): number;
            genNextDialogZIndex(): number;
            getWheelZIndex(): number;
            getDocumentNode(): DockNode;
            getChannel(name?: string): IChannel;
            getLayoutEngine(): DockLayoutEngine;
            /**
                * Panel Type Management
                */
            createNewPanelApiContract(panelTypeName: string): IPanelAPI;
            registerPanelType(panelTypeName: string, instanceType: ViewInstanceType, factoryFn: PanelFactoryFunction): void;
            registerTabbedPanelType(panelTypeName: string, instanceType: ViewInstanceType, factoryFn: TabbedPanelFactoryFunction): void;
            createPanel(panelTypeName: string, options?: any): PanelContainer;
            createPanelAsync(panelTypeName: string, options?: any): Promise<PanelContainer>;
            createTabbedPanel(panelTypeName: string, options?: any): TabbedPanelContainer;
            createTabbedPanelAsync(panelTypeName: string, options?: any): Promise<TabbedPanelContainer>;
            /**
                * Docking Facilities & Wrapper Methods
                */
            dockLeft(referenceNode: DockNode, container: PanelContainer, ratio: number): DockNode;
            dockRight(referenceNode: DockNode, container: PanelContainer, ratio: number): DockNode;
            dockUp(referenceNode: DockNode, container: PanelContainer, ratio: number): DockNode;
            dockDown(referenceNode: DockNode, container: PanelContainer, ratio: number): DockNode;
            dockFill(referenceNode: DockNode, container: PanelContainer): DockNode;
            dockDialogLeft(referenceNode: DockNode, dialog: Dialog): void;
            dockDialogRight(referenceNode: DockNode, dialog: Dialog): void;
            dockDialogUp(referenceNode: DockNode, dialog: Dialog): void;
            dockDialogDown(referenceNode: DockNode, dialog: Dialog): void;
            dockDialogFill(referenceNode: DockNode, dialog: Dialog): void;
            floatDialog(container: PanelContainer, rect: IRect): Dialog;
            queryDockInformationForContainer(container: PanelContainer): IDockInfo;
            queryDockInformationForNode(dockNode: DockNode): IDockInfo;
            existsDockNodeInModel(dockNode: DockNode): boolean;
            isInsideDocumentManager(container: PanelContainer): boolean;
            /**
                * Minimized Slot Management
                */
            requestMinimizeSlot(): number;
            releaseMinimizeSlot(slotId: number): void;
            getNextFreeMinimizedSlotRect(): IRect;
            isToplevelDialog(dialog: Dialog): boolean;
            moveDialogToTop(dialog: Dialog): void;
            getSlotCSSPropertyName(slotId: number): string;
            /**
                * Constraint checks the moved dialog is inside the DockerTS Viewport
                */
            isMoveInsideContainer(element: HTMLElement, delta: IDeltaPoint): boolean;
            isResizeInsideContainer(element: HTMLElement, delta: IDeltaRect): boolean;
            rebuildLayout(node: DockNode): void;
            invalidate(): void;
            setModel(model: DockModel): void;
            setRootNode(rootNode: DockNode): void;
            /**
                * TODO - OTHER MISSING IMPLEMENTATION
                */
            requestTabReorder(container: IDockContainer, e: any): void;
            requestUndockToDialog(container: PanelContainer, event: MouseEvent, dragOffset: IPoint): Dialog;
            requestClose(container: PanelContainer): void;
            openInDialog(container: PanelContainer, event: MouseEvent, dragOffset: IPoint, disableResize: boolean): Dialog;
            requestUndock(container: PanelContainer): void;
            requestRemove(container: PanelContainer): DockNode;
            findNodeFromContainer(container: IDockContainer): DockNode;
            findNodeFromContainerElement(element: HTMLElement): DockNode;
            /**
                * Active Panel & Document Management
                */
            getActivePanel(): PanelContainer;
            getActiveDocument(): PanelContainer;
            setActivePanel(panel: PanelContainer): void;
            /**
                * DockManager Event Handling & Notification Facilities
                */
            listenTo<K extends EventKind>(eventName: K, handler: (payload: EventPayload<K>) => void): ISubscriptionAPI;
            suspendLayout(panel: IDockContainer): void;
            resumeLayout(panel: IDockContainer): void;
            notifyOnDock(node: DockNode): void;
            notifyOnUnDock(node: DockNode): void;
            notifyOnTabReorder(node: DockNode): void;
            notifyOnClosePanel(panel: PanelContainer): void;
            notifyOnCreateDialog(dialog: Dialog): void;
            notifyOnShowDialog(dialog: Dialog): void;
            notifyOnHideDialog(dialog: Dialog): void;
            notifyOnChangeDialogPosition(dialog: Dialog, x: number, y: number): void;
            notifyOnContainerResized(dockContainer: IDockContainer): void;
            notifyOnTabChange(tabPage: TabPage): void;
            notifyOnActivePanelChange(newActivePanel: PanelContainer, oldActivePanel: PanelContainer): void;
            notifyOnActiveDocumentChange(newActivePanel: PanelContainer, oldActivePanel: PanelContainer): void;
            notifyOnUnpinned(panel: PanelContainer): void;
            notifyOnPinned(panel: PanelContainer): void;
            notifyOnUndockToPopup(panel: PanelContainer): void;
            notifyOnDockFromPopup(panel: PanelContainer): void;
            notifyOnMinimized(panel: PanelContainer): void;
            notifyOnRestored(panel: PanelContainer): void;
            notifyOnMaximized(panel: PanelContainer): void;
            notifyOnCollapsed(panel: PanelContainer): void;
            notifyOnExpanded(panel: PanelContainer): void;
            notifyOnLayoutChanged(): void;
            /**
                * PERSISTENCE API
                */
            saveState(): string;
            loadState(json: string): Promise<void>;
            /**
                * MISC HELPER METHODS
                */
            getPanels(): void;
            undockEnabled(state: boolean): void;
            lockDockState(state: boolean): void;
            hideCloseButton(state: boolean): void;
            updatePanels(ids: string[]): void;
            getVisiblePanels(): PanelContainer[];
            _allPanels(node: DockNode, panels: PanelContainer[]): void;
    }
}

declare module 'docker-ts/containers/PanelContainer' {
    import { DockManager } from "docker-ts/facade/DockManager";
    import { IDockContainer } from "docker-ts/common/declarations";
    import { IContextMenuAPI, IGenericPanelAPI, IHeaderButton } from "docker-ts/common/panel-api";
    import { IState } from "docker-ts/common/serialization";
    import { Component } from "docker-ts/framework/Component";
    import { DOM } from "docker-ts/utils/DOM";
    import { ContainerType } from "docker-ts/common/enumerations";
    import { IPoint, IRect, ISize } from "docker-ts/common/dimensions";
    
    import { PanelStateMachine } from "docker-ts/containers/panel-state/PanelStateMachine";
    import { Dialog } from "docker-ts/floating/Dialog";
    export class PanelContainer extends Component implements IDockContainer {
            protected dockManager: DockManager;
            protected state: PanelStateMachine;
            constructor(dockManager: DockManager, panelTypeName: string, api: IGenericPanelAPI);
            getAPI(): IGenericPanelAPI;
            /**
                * Panel Icon & Title Management
                */
            getTitleHtml(): string;
            setTitle(title: string): void;
            getTitle(): string;
            getTitleIcon(): string;
            setTitleIcon(iconHtml: string): void;
            hasChanges(): boolean;
            setHasChanges(flag: boolean): void;
            /**
                * Misc Query and Helper Methods
                */
            queryLoadedSize(): ISize;
            getDockManager(): DockManager;
            getContentFrameDOM(): DOM<HTMLElement>;
            getContentContainerDOM(): DOM<HTMLElement>;
            getFrameHeaderDOM(): DOM<HTMLElement>;
            getContentHostDOM(): DOM<HTMLElement>;
            getPlaceholderDOM(): DOM<HTMLElement>;
            isHidden(): boolean;
            setVisible(visible: boolean): void;
            isHeaderVisible(): boolean;
            setHeaderVisibility(visible: boolean): void;
            enableDefaultContextMenu(flag: boolean): void;
            isDefaultContextMenuEnabled(): boolean;
            getContainerType(): ContainerType;
            onQueryContextMenu(config: IContextMenuAPI): void;
            handleContextMenuAction(actionName: string): void;
            getMinimumChildNodeCount(): number;
            getChildContainers(): IDockContainer[];
            setActiveChild(container: IDockContainer): void;
            activatePanel(): void;
            /**
                * Dimensions Query & Resizing / Layouting
                */
            getPosition(): IPoint;
            getWidth(): number;
            getHeight(): number;
            getMinWidth(): number;
            getMinHeight(): number;
            expandPanel(): Promise<void>;
            collapsePanel(): Promise<void>;
            restorePanel(): Promise<void>;
            minimizePanel(): Promise<void>;
            showPopupWindow(): Promise<void>;
            hidePopupWindow(): Promise<void>;
            togglePinState(): Promise<void>;
            toggleMaximizedPanelState(): void;
            maximizePanel(): void;
            resize(rect: IRect): void;
            invalidate(): void;
            performLayout(children: IDockContainer[], relayoutEvenIfEqual: boolean): void;
            updateState(): void;
            onDraggingStarted(): void;
            onDraggingEnded(): void;
            /**
                * Content Element Manipulation Methods
                */
            setContentElement(content: HTMLElement): void;
            getContentElement(): HTMLElement;
            getHeaderElement(): HTMLElement;
            /**
                *  Header Button Management
                */
            addHeaderButton(button: IHeaderButton): void;
            removeHeaderButton(actionName: string): void;
            allowAction(actionName: string): void;
            denyAction(actionName: string): void;
            isActionDeniedByUser(actionName: string): boolean;
            showHeaderButton(actionName: string, flag: boolean): void;
            isActionAllowed(actionName: string): boolean;
            handleDefaultPanelAction(actionName: string): Promise<void>;
            /**
                * Component Life-Cycle Methods
                */
            protected onInitialized(): void;
            protected onDisposed(): void;
            protected onInitialRender(): HTMLElement;
            protected onUpdate(element: HTMLElement): void;
            /**
                * Persistence Management
                */
            static loadFromState(state: IState, dockManager: DockManager): Promise<PanelContainer>;
            saveState(state: IState): void;
            loadState(state: IState): void;
            /**
                * Dock & Undock Facilities
                */
            canUndock(flag?: boolean): boolean;
            requestUndockToDialog(event: MouseEvent, dragOffset: IPoint): Promise<Dialog>;
            performUndock(): void;
            prepareForDocking(): Promise<void>;
            /**
                * Closing Facilities
                */
            close(): Promise<boolean>;
            performClose(shouldRequestClone?: boolean): Promise<void>;
            destroy(): void;
    }
}

declare module 'docker-ts/containers/TabbedPanelContainer' {
    import { IDockContainer } from "docker-ts/common/declarations";
    import { IRect } from "docker-ts/common/dimensions";
    import { TabOrientation } from "docker-ts/common/enumerations";
    import { ITabbedPanelAPI } from "docker-ts/common/panel-api";
    import { DockManager } from "docker-ts/facade/DockManager";
    import { PanelContainer } from "docker-ts/containers/PanelContainer";
    /**
        * Sub-class of Panel Container implementing a tabbed version of PanelContainer
        */
    export class TabbedPanelContainer extends PanelContainer {
            constructor(dockManager: DockManager, panelTypeName: string, tabbedApi: ITabbedPanelAPI);
            /**
                * Child Container Management Methods
                */
            getChildContainers(): IDockContainer[];
            addContainer(container: PanelContainer): void;
            removeContainer(container: PanelContainer): void;
            /**
                * TabbedPanelContainer Life-Cycle Methods Overrides
                */
            protected onInitialized(): void;
            protected onInitialRender(): HTMLElement;
            protected onDisposed(): void;
            /**
                * Public API Methods
                */
            setTabOrientation(orientation: TabOrientation): void;
            setVisible(visible: boolean): void;
            updateState(): void;
            setActiveChild(container: IDockContainer): void;
            getMinWidth(): number;
            getMinHeight(): number;
            performLayout(children: IDockContainer[], relayoutEvenIfEqual: boolean): void;
            close(): Promise<boolean>;
            resize(rect: IRect): void;
            /**
                * Dragging Handlers
                */
            onDraggingStarted(): void;
            onDraggingEnded(): void;
    }
}

declare module 'docker-ts/framework/component-events' {
    export interface ComponentEventHandler {
        (payload?: any): void;
    }
    export interface ComponentEventSubscription {
        unsubscribe(): void;
    }
    export class EventHandlerSubscription implements ComponentEventSubscription {
        constructor(handler: ComponentEventHandler, eventList: ComponentEvent);
        trigger(payload?: any): void;
        unsubscribe(): void;
    }
    export class ComponentEvent {
        constructor(eventName: string);
        getEventName(): string;
        disposeAll(): void;
        subscribe(handler: ComponentEventHandler): ComponentEventSubscription;
        trigger(payload?: any): void;
        removeSubscription(event: EventHandlerSubscription): void;
    }
    export class ComponentEventManager {
        subscribe(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
        subscribeOnce(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
        unsubscribeAll(eventName: string): void;
        triggerEvent(eventName: string, payload?: any): void;
        disposeAll(): void;
    }
}

declare module 'docker-ts/model/DockNode' {
    import { IDockContainer } from "docker-ts/common/declarations";
    export class DockNode {
        constructor(_container: IDockContainer);
        get parent(): DockNode;
        get container(): IDockContainer;
        get childNodes(): DockNode[];
        getChildNodeAt(index: number): DockNode;
        getChildNodeIndex(node: DockNode): number;
        getChildCount(): number;
        detachFromParent(): void;
        addChild(childNode: DockNode): void;
        addChildBefore(referenceNode: DockNode, childNode: DockNode): void;
        addChildAfter(referenceNode: DockNode, childNode: DockNode): void;
        removeChild(childNode: DockNode): void;
        performLayout(relayoutEvenIfEqual: boolean): void;
    }
}

declare module 'docker-ts/common/dimensions' {
    /**
        * Point Interface
        */
    export interface IPoint {
            x: number;
            y: number;
    }
    /**
        * Size interface
        */
    export interface ISize {
            w: number;
            h: number;
    }
    /**
        * Rect interface
        */
    export interface IRect {
            x: number;
            y: number;
            w: number;
            h: number;
    }
    /**
        * Delta Point Interface - used to change dialog's position
        */
    export interface IDeltaPoint {
            dx: number;
            dy: number;
    }
    /**
        * Delta Rect Interface - used for resizing
        */
    export interface IDeltaRect {
            dx: number;
            dy: number;
            dw: number;
            dh: number;
    }
}

declare module 'docker-ts/floating/Dialog' {
    import { DockManager } from "docker-ts/facade/DockManager";
    import { IEventEmitter } from "docker-ts/common/declarations";
    import { PanelContainer } from "docker-ts/containers/PanelContainer";
    import { ComponentEventHandler, ComponentEventSubscription } from "docker-ts/framework/component-events";
    import { IPoint, IRect } from "docker-ts/common/dimensions";
    
    /**
        * Class reponsible for managing floating dialog frame for the panel container
        */
    export class Dialog implements IEventEmitter {
            constructor(dockManager: DockManager, panel: PanelContainer);
            on(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
            off(eventName: string): void;
            once(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
            getDialogFrameDOM(): HTMLElement;
            /**
                * Public API Methods
                */
            getZIndex(): number;
            getPanel(): PanelContainer;
            getPosition(): IPoint;
            setPosition(x: number, y: number): void;
            resize(rect: IRect): void;
            show(): void;
            hide(): void;
            destroy(): void;
            bringToFront(): void;
    }
}

declare module 'docker-ts/tabview/TabPage' {
    import { Component } from "docker-ts/framework/Component";
    import { TabHandle } from "docker-ts/tabview/TabHandle";
    import { PanelContainer } from "docker-ts/containers/PanelContainer";
    import { DockManager } from "docker-ts/facade/DockManager";
    import { SelectionState, TabOrientation } from "docker-ts/common/enumerations";
    /**
        * TabPage - component for a single tab inside Document Manager, TabbedPanelContainer or FillDockContainer
        *
        * Events:
        *       onTabMoved - triggered when the user requests the tab reorder
        */
    export class TabPage extends Component {
            selectionState: SelectionState;
            constructor(dockManager: DockManager, container: PanelContainer, tabOrientation: TabOrientation, isUndockEnabled: boolean, isMaximizationEnabled: boolean);
            getTabHandle(): TabHandle;
            getContainer(): PanelContainer;
            setSelectionState(state: SelectionState): void;
            getSelectionState(): SelectionState;
            setUndockEnabled(flag: boolean): void;
            setMaximizationEnabled(flag: boolean): void;
            /**
                * Component Life-Cycle Handlers
                */
            protected onInitialized(): void;
            protected onDisposed(): void;
            protected onInitialRender(): HTMLElement;
            protected onUpdate(element: HTMLElement): void;
    }
}

declare module 'docker-ts/facade/DockLayoutEngine' {
    import { DockManager } from "docker-ts/facade/DockManager";
    import { IDockContainer, IDockInfo } from "docker-ts/common/declarations";
    import { DockNode } from "docker-ts/model/DockNode";
    import { TabHandle } from "docker-ts/tabview/TabHandle";
    import { OrientationKind } from "docker-ts/common/enumerations";
    import { IRect } from "docker-ts/common/dimensions";
    /**
        * DockLayoutEngine - class responsible for layout operations
        */
    export class DockLayoutEngine {
            constructor(dockManager: DockManager);
            /**
                * Docks a new container to the left
                */
            dockLeft(referenceNode: DockNode, newNode: DockNode): void;
            /**
                * Docks a new container to the right
                */
            dockRight(referenceNode: DockNode, newNode: DockNode): void;
            /**
                * Docks a new container to the top
                */
            dockUp(referenceNode: DockNode, newNode: DockNode): void;
            /**
                * Docks a new container to the bottom
                */
            dockDown(referenceNode: DockNode, newNode: DockNode): void;
            /**
                * Docks using the "fill mode" - creates a tabbed view of containers
                */
            dockFill(referenceNode: DockNode, newNode: DockNode): void;
            undock(node: DockNode): void;
            close(node: DockNode): void;
            queryDockInformation(node: DockNode): IDockInfo;
            reorderTabs(node: DockNode, handle: TabHandle, state: string, index: number): void;
            /**
                * TODO: CHECK AND REFACTOR THIS LAYOUTING ALGORITHM
                */
            getDockBounds(referenceNode: DockNode, containerToDock: IDockContainer, direction: OrientationKind, insertBefore: boolean): IRect;
            getVaryingDimension(container: IDockContainer, direction: OrientationKind): number;
    }
}

declare module 'docker-ts/model/DockManagerContext' {
    import { DockManager } from "docker-ts/facade/DockManager";
    import { Dialog } from "docker-ts/floating/Dialog";
    import { DocumentManagerContainer } from "docker-ts/containers/DocumentManagerContainer";
    import { DockModel } from "docker-ts/model/DockModel";
    import { Collapser } from "docker-ts/collapsers/Collapser";
    export class DockManagerContext {
        constructor(dockManager: DockManager);
        setModel(model: DockModel): void;
        get model(): DockModel;
        get documentManagerView(): DocumentManagerContainer;
        appendDialog(dialog: Dialog): void;
        removeDialog(dialog: Dialog): void;
        appendCollapser(collapser: Collapser): void;
        removeCollapser(collapser: Collapser): void;
    }
}

declare module 'docker-ts/model/DockModel' {
    import { Collapser } from "docker-ts/collapsers/Collapser";
    import { Dialog } from "docker-ts/floating/Dialog";
    import { DockNode } from "docker-ts/model/DockNode";
    export class DockModel {
        existsDockNodeInModel(dockNode: DockNode): boolean;
        setRootNode(node: DockNode): void;
        setDocumentManagerNode(node: DockNode): void;
        isLastDialog(dialog: Dialog): boolean;
        moveDialogToEnd(dialog: Dialog): void;
        get rootNode(): DockNode;
        get dialogs(): Dialog[];
        get collapsers(): Collapser[];
        get documentManagerNode(): DockNode;
    }
}

declare module 'docker-ts/common/configuration' {
    /**
      * DockerTS Library Configuration
      */
    export interface IDockConfig {
        enableLiveResize?: boolean;
        enableCollapsers?: boolean;
        collapsers?: {
            collapserHideDelay?: number;
        };
        collapserMarginSize?: number;
        collapserHorizontalSlidingRatio?: number;
        collapserVerticalSlidingRatio?: number;
        collapserMaxHorizontalNonSlidingDim?: number;
        collapserMaxVerticalNonSlidingDim?: number;
        defaultPanelSizeMagnitude?: number;
        minimumDefaultWidth?: number;
        minimumDefaultHeight?: number;
        minimizedWindowWidth?: number;
        minimizedWindowHeight?: number;
        dialogResizeHandleThickness?: number;
        dialogResizeHandleCornerSize?: number;
        sideWheelMargin?: number;
        tabStripScrollOffset?: number;
        defaultPanelLabel?: string;
        defaultMinWidth?: number;
        defaultMinHeight?: number;
        dragAndDropFrameRate?: number;
        popupWindows?: {
            minWindowWidth?: number;
            minWindowHeight?: number;
            maxWindowWidth?: number;
            maxWindowHeight?: number;
            windowOffsetX?: number;
            windowOffsetY?: number;
        };
        labels?: {
            collapseLabel?: string;
            expandLabel?: string;
            closeLabel?: string;
            closeAllLabel?: string;
            closeOthersLabel?: string;
            minimizeLabel?: string;
            maximizeLabel?: string;
            restoreLabel?: string;
            showInPopupLabel?: string;
            togglePinLabel?: string;
        };
        zIndexes?: {
            zIndexWheelItem?: number;
            zIndexCounter?: number;
            zIndexDialogCounter?: number;
            zIndexTabHost?: number;
            zIndexTabHandle?: number;
            zIndexWheel?: number;
            zIndexMaximizedPanel?: number;
            zIndexContextMenu?: number;
            zIndexDragAndDropBlocker?: number;
            zIndexTabReorderOperation?: number;
        };
    }
    export const DOCK_CONFIG_DEFAULTS: IDockConfig;
}

declare module 'docker-ts/collapsers/CollapserMargin' {
    import { DockKind } from "docker-ts/common/enumerations";
    import { DockManager } from "docker-ts/facade/DockManager";
    import { Component } from "docker-ts/framework/Component";
    
    /**
        * Collapser Margin where collapsed panel headers are attached to
        */
    export class CollapserMargin extends Component {
            constructor(dockManager: DockManager, collapseKind: DockKind);
            /**
                * Component Life-Cycle Methods
                */
            protected onInitialized(): void;
            protected onDisposed(): void;
            protected onInitialRender(): HTMLElement;
            protected onUpdate(element: HTMLElement): void;
            /**
                * Public API
                */
            getMarginKind(): DockKind;
            appendHeader(domHeader: HTMLElement): void;
            removeHeader(domHeader: HTMLElement): void;
            show(): Promise<void>;
            hide(): Promise<void>;
    }
}

declare module 'docker-ts/framework/Component' {
    import { DOMEventHandler } from "docker-ts/framework/dom-events";
    import { ComponentEventHandler, ComponentEventSubscription } from "docker-ts/framework/component-events";
    import { DOMEventSubscription } from "docker-ts/framework/dom-event-manager";
    export abstract class Component {
        constructor();
        isUpdateRequested(): boolean;
        protected initializeComponent(): void;
        getDOM(): HTMLElement;
        detachFromDOM(): void;
        dispose(): void;
        on(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
        off(eventName: string): void;
        once(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
        triggerEvent(eventName: string, payload?: any): void;
        protected bind(dom: HTMLElement | Window, eventName: string, handler: DOMEventHandler<Event>, options?: {
            capture?: boolean;
        }): DOMEventSubscription;
        protected abstract onInitialized(): void;
        protected abstract onDisposed(): void;
        protected abstract onInitialRender(): HTMLElement;
        protected abstract onUpdate(element: HTMLElement): void;
        requestUpdate(): void;
        updateComponent(): void;
    }
}

declare module 'docker-ts/utils/DOM' {
    import { IRect, ISize } from "docker-ts/common/dimensions";
    export interface CSSClassObject {
            [key: string]: boolean;
    }
    /**
        * DOM Helper Class with caching support
        */
    export class DOM<T extends HTMLElement> {
            constructor(element: T);
            /**
                * CSS Classes Management
                */
            hasClass(name: string): boolean;
            addClass(name: string): DOM<T>;
            removeClass(name: string): DOM<T>;
            addClasses(names: string[]): DOM<T>;
            toggleClass(name: string, flag: boolean): DOM<T>;
            removeClasses(names: string[]): DOM<T>;
            applyClasses(classObject: CSSClassObject): DOM<T>;
            getCss(name: string): string;
            css(propertyName: string, propertyValue: string): DOM<T>;
            /**
                * Dimensions Changing Methods
                */
            cacheBounds(flag: boolean): DOM<T>;
            getLeft(): number;
            getTop(): number;
            getRight(): number;
            getBottom(): number;
            getWidth(): number;
            getHeight(): number;
            getBoundingClientRect(): DOMRect;
            getBoundsRect(): IRect;
            getComputedRect(): IRect;
            getClientRect(): IRect;
            getOffsetRect(): IRect;
            left(value: number | string): this;
            top(value: number | string): this;
            right(value: number | string): this;
            bottom(value: number | string): this;
            width(value: number | string): this;
            height(value: number | string): this;
            applySize(rect: DOMRect | IRect | ISize): DOM<T>;
            applyRect(rect: DOMRect | IRect): DOM<T>;
            /**
                * Misc Methods
                */
            getElement(): T;
            getOffsetParent(): DOM<HTMLElement>;
            removeAllChildren(): DOM<T>;
            removeFromDOM(): void;
            text(text: string): DOM<T>;
            getText(): string;
            getHtml(): string;
            html(html: string): DOM<T>;
            attr(name: string, value: string): DOM<T>;
            zIndex(value: number | string): DOM<T>;
            getZIndex(): number;
            onClick(handler: (e: MouseEvent) => void): DOM<T>;
            appendTo(container: HTMLElement | DOM<HTMLElement>): DOM<T>;
            prependChild(child: HTMLElement | DOM<HTMLElement>): DOM<T>;
            appendChild(child: HTMLElement | DOM<HTMLElement>): DOM<T>;
            appendChildren(children: (HTMLElement | DOM<HTMLElement>)[]): DOM<T>;
            hide(): DOM<T>;
            show(): DOM<T>;
            once(eventName: string, handler: (event: Event) => void): void;
            get(): T;
            static from<T extends HTMLElement>(element: T): DOM<T>;
            static create<K extends keyof HTMLElementTagNameMap>(name: K): DOM<HTMLElementTagNameMap[K]>;
    }
}

declare module 'docker-ts/containers/panel-state/PanelStateMachine' {
    import { PanelContainerState } from "docker-ts/common/enumerations";
    import { DockManager } from "docker-ts/facade/DockManager";
    import { Dialog } from "docker-ts/floating/Dialog";
    import { PanelContainer } from "docker-ts/containers/PanelContainer";
    import { IPanelStateAPI } from "docker-ts/containers/panel-state/IPanelState";
    /**
        * Facade Class - generic state machine class for a panel container
        */
    export class PanelStateMachine implements IPanelStateAPI {
            constructor(dockManager: DockManager, panel: PanelContainer, initialState: PanelContainerState);
            getCurrentState(): PanelContainerState;
            dispose(): void;
            /**
                * State Transition Methods
                */
            dockPanel(): Promise<boolean>;
            floatPanel(dialog: Dialog): Promise<boolean>;
            minimize(): Promise<boolean>;
            maximize(): Promise<boolean>;
            restore(): Promise<boolean>;
            showPopup(): Promise<boolean>;
            hidePopup(): Promise<boolean>;
            pinPanel(): Promise<boolean>;
            unpinPanel(): Promise<boolean>;
            collapse(): Promise<boolean>;
            expand(): Promise<boolean>;
            updateState(): void;
    }
}

declare module 'docker-ts/tabview/TabHandle' {
    import { SelectionState, TabOrientation } from "docker-ts/common/enumerations";
    import { Component } from "docker-ts/framework/Component";
    
    /**
        * TabHandle Component
        * Events:
        *      onTabClicked    - tab handle was clicked
        *      onTabDblClicked - tab handle was double clicked - (triggers panel maximization)
        *      onTabMoved      - tab reorder was requested by drag-and-drop
        *      onCloseClicked  - close button was clicked
        *      onContextMenu   - user requests to show context menu
        *
        * TO-DOs:
        *      - bind drag-and-drop to initiate the panel undock operation
        */
    export class TabHandle extends Component {
            orientation: TabOrientation;
            icon: string;
            title: string;
            closeButtonVisible: boolean;
            isModifiedState: boolean;
            selectionState: SelectionState;
            constructor(isUndockEnabled: boolean);
            setSelectionState(state: SelectionState): void;
            getUndockEnabled(): boolean;
            setUndockEnabled(flag: boolean): void;
            /**
                * Component Life-Cycle Methods
                */
            protected onInitialized(): void;
            protected onDisposed(): void;
            protected onInitialRender(): HTMLElement;
            protected onUpdate(element: HTMLElement): void;
    }
}

declare module 'docker-ts/containers/DocumentManagerContainer' {
    import { DockManager } from "docker-ts/facade/DockManager";
    import { FillDockContainer } from "docker-ts/containers/FillDockContainer";
    /**
      * Document Manager Container is just a special type of FillDockContainer
      */
    export class DocumentManagerContainer extends FillDockContainer {
        constructor(dockManager: DockManager);
        getMinimumChildNodeCount(): number;
    }
}

declare module 'docker-ts/collapsers/Collapser' {
    import { IRect } from "docker-ts/common/dimensions";
    import { DockKind } from "docker-ts/common/enumerations";
    import { PanelContainer } from "docker-ts/containers/PanelContainer";
    import { DockManager } from "docker-ts/facade/DockManager";
    import { Component } from "docker-ts/framework/Component";
    import { DOM } from "docker-ts/utils/DOM";
    
    /**
        *
        * Collapser Component hiding a PanelContainer sideways
        *
        * Events:
        *      - onShowPanel - panel is about to be shown
        *      - onHidePanel - panel is about to be hidden
        */
    export class Collapser extends Component {
            constructor(dockManager: DockManager, panel: PanelContainer, collapseKind: DockKind, panelRect: IRect);
            /**
                * Component Life-Cycle Methods
                */
            protected onInitialized(): void;
            protected onDisposed(): void;
            protected onInitialRender(): HTMLElement;
            protected onUpdate(element: HTMLElement): void;
            /**
                * Public API Methods
                */
            getPanel(): PanelContainer;
            getPanelPlaceholderDOM(): DOM<HTMLElement>;
    }
}

declare module 'docker-ts/framework/dom-events' {
    export interface DOMEventHandler<EVT extends Event> {
        (event: EVT): void;
    }
    export class DOMEvent<EVT extends Event> {
        constructor(domElement: Element | Window);
        bind(name: string, handler: DOMEventHandler<EVT>, options: {
            capture: boolean;
        }): void;
        unbind(): void;
    }
    export type DOMMouseEvent = DOMEvent<MouseEvent>;
    export type DOMTouchEvent = DOMEvent<TouchEvent>;
    export type DOMKeyboardEvent = DOMEvent<KeyboardEvent>;
}

declare module 'docker-ts/framework/dom-event-manager' {
    import { DOMEventHandler } from "docker-ts/framework/dom-events";
    export interface DOMEventSubscription {
        unbind(): void;
    }
    export class DOMEventManager {
        bind(element: HTMLElement | Window, eventName: string, handler: DOMEventHandler<Event>, opts: {
            capture: boolean;
        }): DOMEventSubscription;
        unbindAll(): void;
        removeSubscription(subcription: DOMEventSubscription): void;
    }
}

declare module 'docker-ts/containers/panel-state/IPanelState' {
    import type { Dialog } from "docker-ts/floating/Dialog";
    /**
        * Generic panel state API interface
        */
    export interface IPanelStateAPI {
            dispose(): void;
            dockPanel(): Promise<boolean>;
            floatPanel(dialog: Dialog): Promise<boolean>;
            minimize(): Promise<boolean>;
            maximize(): Promise<boolean>;
            restore(): Promise<boolean>;
            collapse(): Promise<boolean>;
            expand(): Promise<boolean>;
            showPopup(): Promise<boolean>;
            hidePopup(): Promise<boolean>;
            pinPanel(): Promise<boolean>;
            unpinPanel(): Promise<boolean>;
            updateState(): void;
    }
    /**
        * Generic panel state interface
        */
    export interface IGenericPanelState extends IPanelStateAPI {
            enterState(initialState: boolean): Promise<void>;
            leaveState(): Promise<void>;
    }
}

declare module 'docker-ts/containers/FillDockContainer' {
    import { DockManager } from "docker-ts/facade/DockManager";
    import { IDockContainer } from "docker-ts/common/declarations";
    import { IState } from "docker-ts/common/serialization";
    import { ComponentEventHandler, ComponentEventSubscription } from "docker-ts/framework/component-events";
    import { ContainerType, TabOrientation } from "docker-ts/common/enumerations";
    import { IContextMenuAPI } from "docker-ts/common/panel-api";
    import { IRect, ISize } from "docker-ts/common/dimensions";
    
    /**
      * Decorator over TabHost
      */
    export class FillDockContainer implements IDockContainer {
        constructor(dockManager: DockManager, tabStripDirection: TabOrientation);
        handleContextMenuAction(actionName: string): void;
        updateState(): void;
        setHeaderVisibility(visible: boolean): void;
        isHidden(): boolean;
        queryLoadedSize(): ISize;
        onQueryContextMenu(config: IContextMenuAPI): void;
        dispose(): void;
        getDOM(): HTMLElement;
        hasChanges(): boolean;
        getMinimumChildNodeCount(): number;
        setActiveChild(container: IDockContainer): void;
        setVisible(visible: boolean): void;
        getMinWidth(): number;
        getMinHeight(): number;
        getWidth(): number;
        getHeight(): number;
        performLayout(children: IDockContainer[], relayoutEvenIfEqual: boolean): void;
        getChildContainers(): IDockContainer[];
        resize(rect: IRect): void;
        getContainerType(): ContainerType;
        saveState(state: IState): void;
        loadState(state: IState): void;
        on(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
        off(eventName: string): void;
        once(eventName: string, handler: ComponentEventHandler): ComponentEventSubscription;
    }
}

